name: Run Tests

on:
  push:
    branches:
      - main
      - update-db-schema

  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: "0.6.6"

      - name: Set up Python
        run: uv python install

      - name: Install Project
        run: uv sync --dev

      - name: Run unit tests
        run: uv run pytest tests/unit

      
  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (optional for caching)
        uses: docker/setup-buildx-action@v3

      - name: Generate .env.test from secrets
        run: |
          echo "POSTGRES_USER=test_user" >> .env.test
          echo "POSTGRES_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}" >> .env.test
          echo "POSTGRES_DB=test_db" >> .env.test
          echo "POSTGRES_PORT=${{ secrets.TEST_DB_PORT || 5433 }}" >> .env.test

      - name: Build the test database image
        run: |
          docker compose --env-file .env.test -f docker/docker-compose.test.yaml build

      - name: Start the test database
        run: |
          docker compose --env-file .env.test -f docker/docker-compose.test.yaml up -d

      - name: Print Postgres logs
        run: docker compose -f docker/docker-compose.test.yaml logs postgres_test

      - name: Wait for Postgres to be ready
        run: |
          echo "Waiting for Postgres..."
          until pg_isready -h localhost -p 5433 -U test_user; do sleep 2; done

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: "0.6.6"

      - name: Set up Python
        run: uv python install

      - name: Install Project
        run: uv sync --dev

      - name: Run integration tests
        run: pytest tests/integration
        env:
          PORT: 5433
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}

      - name: Tear down containers
        if: always()
        run: docker compose --env-file .env.test -f docker/docker-compose.test.yaml down --volumes
